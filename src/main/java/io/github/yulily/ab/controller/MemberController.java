package io.github.yulily.ab.controller;

import io.github.yulily.ab.model.Member;
import io.github.yulily.ab.model.repository.MemberRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller // This means that this class is a Controller
@RequestMapping(path="/member") // This means URL's start with /demo (after Application path)
public class MemberController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MemberRepository memberRepository;

    @GetMapping(path="/new")
    public String newModel() {
        return "new";
    }

    @GetMapping(path="/show")
    public @ResponseBody Member show(@RequestParam Long id) {
        return memberRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Member not found with id " + id));
    }

    @PostMapping(path="/update") // Map ONLY POST Requests
    public String update(
            @RequestParam Long id,
            @RequestParam String memberName,
            RedirectAttributes redirectAttributes
    ) {
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Member not found with id " + id));
        member.setMemberName(memberName);
        memberRepository.save(member);

        redirectAttributes.addAttribute("id", id); // リダイレクト先にパラメータを追加
        return "redirect:/show";
    }

    @PostMapping(path="/create") // Map ONLY POST Requests
    public String create(
            @RequestParam String memberName,
            RedirectAttributes redirectAttributes
    ) {
        Member member = new Member();
        member.setMemberName(memberName);
        Member savedMember = memberRepository.save(member); // 保存後にエンティティを取得

        redirectAttributes.addAttribute("id", savedMember.getId());
        return "redirect:/show";
    }


    @GetMapping(path="/year")
    public @ResponseBody Iterable<Member> getByYear() {
        return memberRepository.findAll();
    }
}